generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(uuid())
  email                 String         @unique
  name                  String?
  password              String?
  emailVerified         DateTime?
  image                 String?
  account_creation_date DateTime       @default(now())
  roleId                String?
  deletedAt             DateTime?
  accounts              Account[]
  address               Address[]
  contacts              Contact[]
  posts                 Post[]
  profile               Profile[]
  projects              Project[]
  resume                Resume[]
  sessions              Session[]
  skills                Skills[]
  role                  Role?          @relation(fields: [roleId], references: [id])
  organizations         Organization[] @relation("OrganizationToUser")

  @@index([email])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String?
  createdOn DateTime @default(now())
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model Contact {
  id              String    @id @default(uuid())
  name            String
  phone           String
  email           String
  userId          String?
  addressId       String?
  createdByUserId String
  createdOn       DateTime  @default(now())
  websiteId       String?
  company         Company[]
  address         Address?  @relation(fields: [addressId], references: [id])
  user            User?     @relation(fields: [userId], references: [id])
  website         Website?  @relation(fields: [websiteId], references: [id])

  @@index([userId, email])
}

model Profile {
  id              String   @id @default(uuid())
  firstname       String
  lastname        String
  middlename      String?
  nickname        String?
  gender          String?
  bio             String?
  status          String?
  userId          String?
  websiteId       String?
  age             Int?
  createdByUserId String
  createdOn       DateTime @default(now())
  username        String?
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  website         Website? @relation(fields: [websiteId], references: [id])

  @@index([userId])
}

model Social {
  id              String   @id @default(uuid())
  name            String?
  description     String?
  websiteId       String?
  createdByUserId String
  createdOn       DateTime @default(now())
  website         Website? @relation(fields: [websiteId], references: [id])

  @@index([websiteId])
}

model Website {
  id              String       @id @default(uuid())
  url             String
  createdByUserId String
  createdOn       DateTime     @default(now())
  company         Company[]
  contact         Contact[]
  profile         Profile[]
  school          School[]
  social          Social[]
  technology      Technology[]

  @@index([url])
}

model Address {
  id              String    @id @default(uuid())
  address1        String?
  address2        String?
  city            String?
  country         String?
  postal          Int?
  state           String?
  type            String
  createdOn       DateTime  @default(now())
  createdByUserId String
  userId          String?
  user            User?     @relation(fields: [userId], references: [id])
  contact         Contact[]

  @@index([userId])
}

model Inquiry {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  createdOn DateTime @default(now())

  @@index([email])
}

model Role {
  id              String   @id @default(uuid())
  name            String
  createdByUserId String
  createdOn       DateTime @default(now())
  description     String?
  user            User[]

  @@index([name])
}

model Organization {
  id              String   @id @default(uuid())
  name            String
  description     String?
  createdByUserId String
  createdOn       DateTime @default(now())
  members         User[]   @relation("OrganizationToUser")

  @@index([name])
}

model Resume {
  id              String       @id @default(uuid())
  title           String
  summary         String
  published       Boolean      @default(false)
  userId          String?
  createdByUserId String
  createdOn       DateTime     @default(now())
  education       Education[]
  employment      Employment[]
  user            User?        @relation(fields: [userId], references: [id])
  skills          Skills[]
  company         Company[]    @relation("CompanyToResume")

  @@index([userId])
}

model Company {
  id              String       @id @default(uuid())
  name            String
  contactId       String?
  websiteId       String?
  createdByUserId String
  createdOn       DateTime     @default(now())
  description     String?
  logoId          String?
  industryId      String?
  deletedAt       DateTime?
  contact         Contact?     @relation(fields: [contactId], references: [id])
  industry        Industry?    @relation(fields: [industryId], references: [id])
  logo            Image?       @relation(fields: [logoId], references: [id])
  website         Website?     @relation(fields: [websiteId], references: [id])
  employment      Employment[]
  resume          Resume[]     @relation("CompanyToResume")

  @@index([name])
}

model Employment {
  id              String      @id @default(uuid())
  startDate       DateTime?
  endDate         DateTime?
  current         Boolean?
  responsibility  String?
  companyId       String?
  resumeId        String?
  createdByUserId String
  createdOn       DateTime    @default(now())
  professionId    String?
  company         Company?    @relation(fields: [companyId], references: [id])
  position        Profession? @relation(fields: [professionId], references: [id])
  resume          Resume?     @relation(fields: [resumeId], references: [id])

  @@index([companyId, professionId])
}

model Profession {
  id              String       @id @default(uuid())
  name            String
  createdByUserId String
  createdOn       DateTime     @default(now())
  industryId      String?
  employment      Employment[]
  industry        Industry?    @relation(fields: [industryId], references: [id])

  @@index([name])
}

model Industry {
  id              String       @id @default(uuid())
  name            String
  createdByUserId String
  createdOn       DateTime     @default(now())
  company         Company[]
  profession      Profession[]

  @@index([name])
}

model Education {
  id              String   @id @default(uuid())
  level           String?
  typeId          String?
  year            Int?
  resumeId        String?
  schoolId        String?
  createdByUserId String
  createdOn       DateTime @default(now())
  degreeId        String?
  degree          Degree?  @relation(fields: [degreeId], references: [id])
  resume          Resume?  @relation(fields: [resumeId], references: [id])
  School          School?  @relation(fields: [schoolId], references: [id])
  type            Type?    @relation(fields: [typeId], references: [id])

  @@index([resumeId, schoolId])
}

model Degree {
  id              String      @id @default(uuid())
  name            String?
  createdByUserId String
  createdOn       DateTime    @default(now())
  education       Education[]

  @@index([name])
}

model School {
  id              String      @id @default(uuid())
  name            String
  websiteId       String?
  createdByUserId String
  createdOn       DateTime    @default(now())
  education       Education[]
  Website         Website?    @relation(fields: [websiteId], references: [id])

  @@index([name])
}

model Technology {
  id              String    @id @default(uuid())
  name            String
  description     String?
  typeId          String?
  websiteId       String?
  createdByUserId String
  createdOn       DateTime  @default(now())
  type            String?
  url             String?
  project         Project[]
  Type            Type?     @relation(fields: [typeId], references: [id])
  Website         Website?  @relation(fields: [websiteId], references: [id])

  @@index([name])
}

model Project {
  id              String     @id @default(uuid())
  name            String
  startDate       DateTime?
  endDate         DateTime?
  description     String?
  url             String
  userId          String?
  createdByUserId String
  createdOn       DateTime   @default(now())
  technologyId    String
  deletedAt       DateTime?
  technology      Technology @relation(fields: [technologyId], references: [id])
  User            User?      @relation(fields: [userId], references: [id])

  @@index([technologyId])
}

model Skills {
  id              String   @id @default(uuid())
  name            String
  description     String?
  level           String?
  years           Int?
  resumeId        String?
  userId          String?
  createdByUserId String
  createdOn       DateTime @default(now())
  resume          Resume?  @relation(fields: [resumeId], references: [id])
  User            User?    @relation(fields: [userId], references: [id])
}

model Image {
  id              String      @id @default(uuid())
  path            String
  filename        String?
  title           String?
  projectImageId  String?
  formId          String?
  navigationId    String?
  pageId          String?
  createdByUserId String
  createdOn       DateTime    @default(now())
  Company         Company[]
  Form            Form?       @relation(fields: [formId], references: [id])
  Navigation      Navigation? @relation(fields: [navigationId], references: [id])
  Page            Page?       @relation(fields: [pageId], references: [id])
}

model Component {
  id              String   @id @default(uuid())
  name            String
  props           Json?
  createdByUserId String?
  createdOn       DateTime @default(now())
  type            String?
  sectionId       String?
  section         Section? @relation(fields: [sectionId], references: [id])
}

model Page {
  id              String    @id @default(uuid())
  name            String
  content         String
  props           Json
  typeId          String?
  createdByUserId String?
  createdOn       DateTime  @default(now())
  default         Boolean   @default(false)
  Form            Form[]
  image           Image[]
  layout          Layout[]
  type            Type?     @relation(fields: [typeId], references: [id])
  Section         Section[]
}

model Navigation {
  id              String   @id @default(uuid())
  name            String
  props           Json
  path            String
  typeId          String?
  createdByUserId String
  createdOn       DateTime @default(now())
  image           Image[]
  type            Type?    @relation(fields: [typeId], references: [id])
}

model Section {
  id        String      @id @default(uuid())
  name      String
  props     Json?
  createdOn DateTime    @default(now())
  pageId    String?
  Component Component[]
  page      Page?       @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Form {
  id              String        @id @default(uuid())
  name            String
  typeId          String?
  createdByUserId String?
  createdOn       DateTime      @default(now())
  description     String?
  status          String?
  pageId          String?
  fields          Field[]
  Page            Page?         @relation(fields: [pageId], references: [id])
  type            Type?         @relation(fields: [typeId], references: [id])
  formSections    FormSection[]
  Image           Image[]
}

model FormSection {
  id              String   @id @default(uuid())
  name            String
  formId          String?
  createdByUserId String?
  createdOn       DateTime @default(now())
  fields          Field[]
  form            Form?    @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model Field {
  id              String       @id @default(uuid())
  name            String
  createdByUserId String?
  createdOn       DateTime     @default(now())
  required        Boolean?
  formId          String?
  formSectionId   String?
  label           String?
  type            String?
  options         String[]
  value           String?
  form            Form?        @relation(fields: [formId], references: [id])
  formSection     FormSection? @relation(fields: [formSectionId], references: [id], onDelete: Cascade)
}

model Layout {
  id              String   @id @default(uuid())
  name            String
  pageId          String?
  createdByUserId String?
  createdOn       DateTime @default(now())
  props           Json?
  type            String?
  page            Page?    @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Type {
  id              String       @id @default(uuid())
  name            String
  category        String
  categoryId      String?
  createdByUserId String
  createdOn       DateTime     @default(now())
  Education       Education[]
  Form            Form[]
  Navigation      Navigation[]
  Page            Page[]
  Technology      Technology[]
  Category        Category?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Category {
  id              String   @id @default(uuid())
  name            String
  createdByUserId String
  createdOn       DateTime @default(now())
  type            Type[]
}
